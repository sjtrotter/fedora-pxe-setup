- name: Post Install for Basic Workstation
  hosts: localhost
  become: true
  tasks:

    - name: Update All (except kernel)
      ansible.builtin.dnf:
        name: "*"
        state: latest
        exclude: kernel-core,kernel-modules

    - name: Install Desktop Tweaks
      ansible.builtin.dnf:
        name:
          - gnome-extensions-app
          - gnome-tweaks
          - gnome-shell-extension-frippery-applications-menu
          - gnome-shell-extension-apps-menu
          - gnome-shell-extension-caffeine
          - gnome-shell-extension-no-overview
          - gnome-shell-extension-window-list
          - gnome-shell-extension-dash-to-dock
        state: latest
    
    - name: Install CERT Repo Keys
      ansible.builtin.command:
        cmd: "{{ item }}"
      with_items:
        - rpm --import https://forensics.cert.org/forensics.asc
        - rpm --import https://www.cert.org/forensics/repository/forensics-expires-2022-04-03.asc

    - name: Install Other Repo RPMs
      ansible.builtin.dnf:
        name:
          - https://forensics.cert.org/cert-forensics-tools-release-36.rpm
          - fedora-workstation-repositories
        state: installed

    - name: Write vscode Repo
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/vscode.repo
        content: |
          [code]
          name=Visual Studio Code
          baseurl=https://packages.microsoft.com/yumrepos/vscode
          enabled=0
          gpgcheck=1
          gpgkey=https://packages.microsoft.com/keys/microsoft.asc

    # - name: Write PowerShell Repo
    #   ansible.builtin.copy:
    #     dest: /etc/yum.repos.d/microsoft.repo
    #     content: |
    #       [powershell]
    #       name=PowerShell
    #       baseurl=https://packages.microsoft.com/rhel/8/prod
    #       enabled=0
    #       gpgcheck=1
    #       gpgkey=https://packages.microsoft.com/keys/microsoft.asc

    - name: Get NetworkMiner Zip
      ansible.builtin.get_url:
        url: https://www.netresec.com/?download=NetworkMiner
        dest: /tmp/nm.zip
    
    - name: Extract NetworkMiner
      ansible.builtin.unarchive:
        src: /tmp/nm.zip
        dest: /opt

    - name: chmod NetworkMiner Files
      ansible.builtin.shell:
        cmd: "{{ item }}"
      with_items: 
        - chmod +x /opt/NetworkMiner*/NetworkMiner.exe
        - chmod -R go+w /opt/NetworkMiner*/AssembledFiles
        - chmod -R go+w /opt/NetworkMiner*/Captures
        - mv networkminer.png /opt/NetworkMiner*

    - name: Get NM exe Location
      ansible.builtin.find:
        patterns: "*NetworkMiner.exe"
        paths: "/opt"
        recurse: yes
      register: nm_exe

    - name: Get NM icon Location
      ansible.builtin.find:
        patterns: "*networkminer.png"
        paths: "/opt"
        recurse: yes
      register: nm_icon

    - name: Write NetworkMiner Desktop File
      ansible.builtin.copy:
        dest: /usr/share/applications/NetworkMiner.desktop
        content: |
          [Desktop Entry]
          Type=Application
          Name=Network Miner
          Exec=mono {{ nm_exe.files[0].path }} --noupdatecheck
          Icon={{ nm_icon.files[0].path }}
          Categories=Application;Network;Monitor;

    - name: Install Tools Packages
      ansible.builtin.dnf:
        name:
          - mono-devel
          - net-tools
          - nmap
          - putty
          - screen
          - suricata
          - tcpdump
          - tcpreplay
          - wireshark
          - yara
          - yubioath-desktop
          - google-chrome-stable
          - code
          - brim
          - zeek
          - autopsy
          - Volatility
          - avml
          - gcc
          - opensc
          - openssl
          - expect
          - remmina
          - pidgin
          - gnome-shell-extension-pidgin
          - libpurple-devel
          - libmarkdown-devel
          - json-glib-devel
          - glib2
          - git
          # - powershell
        state: latest
        enablerepo: google-chrome,code #,powershell

    - name: Install Pidgin Rocketchat Plugin
      ansible.builtin.shell:
        cmd: "{{ item }}"
      with_items:
        - git clone https://github.com/EionRobb/purple-rocketchat
        - cd purple-rocketchat
        - make
        - make install

    - name: Download Horizon Client
      ansible.builtin.get_url:
        url: https://download3.vmware.com/software/CART23FQ2_LIN64_2206/VMware-Horizon-Client-2206-8.6.0-20094634.x64.bundle
        dest: '.'
    
    - name: Install Horizon Client
      ansible.builtin.shell:
        cmd: 'printf "no\nno\n" | bash VMware-Horizon-Client-2206-8.6.0-20094634.x64.bundle --console --required --eulas-agreed --stop-services'

    - name: Make Directory for SmartCard Support
      ansible.builtin.file:
        state: directory
        path: /usr/lib/vmware/view/pkcs11

    - name: Link pkcs11 For SmartCard Support
      ansible.builtin.file:
        state: link
        src: /usr/lib64/pkcs11/opensc-pkcs11.so
        path: /usr/lib/vmware/view/pkcs11/libpkcs11.so

    - name: Download DoD Certs
      ansible.builtin.get_url:
        url: https://dl.dod.cyber.mil/wp-content/uploads/pki-pke/zip/unclass-certificates_pkcs7_v5-6_dod.zip
        dest: '.'

    - name: Unzip Certs
      ansible.builtin.unarchive:
        src: unclass-certificates_pkcs7_v5-6_dod.zip
        dest: '.'

    - name: Convert Certs to pem
      ansible.builtin.shell:
        cmd: openssl pkcs7 -in Certificates_PKCS7_v5.6_DoD/Certificates_PKCS7_v5.6_DoD.pem.p7b -print_certs -out DoD_CAs.pem

    - name: Copy Certs to etc
      ansible.builtin.copy:
        src: DoD_CAs.pem
        dest: /etc/pki/ca-trust/source/anchors

    - name: Update CA Trust
      ansible.builtin.shell:
        cmd: update-ca-trust

    - name: Get PIA Installer
      ansible.builtin.get_url:
        url: https://installers.privateinternetaccess.com/download/pia-linux-3.3.1-06924.run
        dest: '.'

    - name: Write install script wrapper
      ansible.builtin.copy:
        dest: 'test.sh'
        content: |
          expect -c 'spawn bash /tmp/pia-linux-3.3.1-06924.run; expect "Password:"; send "testpass\n"; interact'

    - name: Make dummy user to install PIA
      ansible.builtin.shell:
        cmd: "{{ item }}"
      with_items:
        - useradd -UG wheel -p $(openssl passwd -6 testpass) testuser

    - name: Install PIA with dummy user
      become: true
      become_user: testuser
      vars:
        ansible_become_pass: testpass
      ansible.builtin.shell:
        cmd: bash /tmp/test.sh

    - name: Kill PIA Process
      ansible.builtin.shell:
        cmd: "kill -9 $(ps -ef | grep -v grep | grep pia | awk '{print $2}')"

    - name: Remove dummy user
      ansible.builtin.shell:
        cmd: "{{ item }}"
      with_items:
        - userdel testuser
        - rm -rf /home/testuser /var/spool/mail/testuser

    - name: Write User Profile for Extensions
      ansible.builtin.copy:
        dest: /etc/dconf/db/local.d/00-extensions
        content: |
          [org/gnome/shell]
          # List all extensions that you want to have enabled for all users
          enabled-extensions=['apps-menu@gnome-shell-extensions.gcampax.github.com','caffeine@patapon.info','no-overview@fthx','places-menu@gnome-shell-extensions.gcampax.github.com','window-list@gnome-shell-extensions.gcampax.github.com']

    - name: Write User Favorite Apps
      ansible.builtin.copy:
        dest: /etc/dconf/db/local.d/00-favorite-apps
        content: |
          [org/gnome/shell]
          favorite-apps = ['gnome-terminal.desktop','nautilus.desktop','firefox.desktop','google-chrome.desktop','autopsy.desktop','code.desktop','org.gnome.TextEditor.desktop','putty.desktop','NetworkMiner.desktop','org.wireshark.Wireshark.desktop','brim.desktop','vmware-view.desktop','piavpn.desktop','com.yubico.yubioath.desktop','org.gnome.tweaks.desktop','org.gnome.Settings.desktop']

    - name: Set User Wallpaper
      ansible.builtin.copy:
        dest: /etc/dconf/db/local.d/00-background
        content: |
          [org/gnome/desktop/background]
          picture-uri='file:///usr/share/backgrounds/wallpapers/low-poly-raven.png'
          picture-uri-dark='file:///usr/share/backgrounds/wallpapers/low-poly-raven.png'
          picture-options='zoom'
          primary-color='000000'
          secondary-color='FFFFFF'
          show-desktop-icons="true"

    - name: Add Window Buttons (maximize, minimize)
      ansible.builtin.copy:
        dest: /etc/dconf/db/local.d/00-windowbuttons
        content: |
          [org/gnome/desktop/wm/preferences]
          button-layout='appmenu:minimize,maximize,close'

    - name: Set Dark Mode
      ansible.builtin.copy:
        dest: /etc/dconf/db/local.d/00-darkmode
        content: |
          [org/gnome/desktop/interface]
          color-scheme='prefer-dark'
          # gtk-theme='Adwaita-dark' # Can't use this due to Horizon (?)

    - name: Get Wallpapers
      ansible.builtin.find:
        patterns: "*.png"
        paths: "/usr/share/backgrounds/wallpapers"
        recurse: yes
      register: wallpapers

    - name: Template Wallpaper XML
      ansible.builtin.copy:
        dest: "/usr/share/gnome-background-properties/{{ item.path.split('/')[-1].split('.')[0] }}.xml"
        content: |
          <?xml version="1.0"?>
          <!DOCTYPE wallpapers SYSTEM "gnome-wp-list.dtd">
          <wallpapers>
            <wallpaper deleted='false'>
              <name>{{ item.path.split('/')[-1].split(".")[0].split('-') | title }}</name>
              <filename>/usr/share/backgrounds/wallpapers/{{ item.path.split('/')[-1] }}</filename>
              <filename-dark>/usr/share/backgrounds/wallpapers/{{ item.path.split('/')[-1] }}</filename-dark>
              <options>zoom</options>
              <shade_type>solid</shade_type>
              <pcolor>#000000</pcolor>
              <scolor>#FFFFFF</scolor>
            </wallpaper>
          </wallpapers>
      loop:
        "{{ wallpapers.files }}"

    - name: Update dconf
      ansible.builtin.shell:
        cmd: dconf update

    - name: Remove Un-needed Packages
      ansible.builtin.dnf:
        name:
          - fedora-chromium-config
          # - gnome-tour  # CANNOT RUN because first-user will fail
        state: absent
        autoremove: yes

    # CANNOT RUN because first-user will fail
    # - name: Run dnf clean all
    #   ansible.builtin.shell:
    #     cmd: dnf clean all

    - name: Remove VMware Chrome Policy
      ansible.builtin.shell:
        cmd: rm /etc/opt/chrome/policies/managed/vmware-urlAllowlist.json

    - name: Expand etc Settings
      ansible.builtin.unarchive:
        src: settings.tar.gz
        dest: '/'

    - name: Colorize bash prompts
      ansible.builtin.blockinfile:
        path: "{{ item }}"
        block: |
          # original: No colors, No PS0, PS1="[\u@\h \W] \$"
          TPUT_RED=$(($(tput colors) < 256 ? 1 : 196))
          TPUT_GREEN=$(($(tput colors) < 256 ? 2 : 46))
          TPUT_ORANGE=$(($(tput colors) < 256 ? 3 : 208))
          TPUT_BLUE=$(($(tput colors) < 256 ? 4 : 27))
          TPUT_PURPLE=$(($(tput colors) < 256 ? 5 : 129))

          ANSI_CLEAR="\[\033[0m\]"
          ANSI_BLACK="\[\033[1;90m\]"
          ANSI_RED="\[\033[1;31m\]"
          ANSI_GREEN="\[\033[1;32m\]"
          ANSI_YELLOW="\[\033[1;93m\]"
          ANSI_BLUE="\[\033[1;94m\]"
          ANSI_PURPLE="\[\033[1;95m\]"
          ANSI_BOLD="\[\033[1m\]"

          #SSH_BOX=$(if [[ $SSH_CLIENT ]]; then printf "$SSH_CLIENT" | cut -d '=' -f 2 | awk '{print $1}'; else printf ""; fi)

          #PS0="$(tput cuu 1; tput cuf $(tput cols); tput cub 20; printf ' @ [';)$(tput setaf $TPUT_ORANGE)\D{%F %H:%M}$(tput sgr0)]\n"
          #PS1="$ANSI_BOLD$(printf "\u250c\u2500\u2500\u27ea")${ANSI_BLACK} $(tty | sed 's|/dev/||g')${ANSI_CLEAR}${ANSI_BOLD} on $ANSI_BLUE\h${ANSI_CLEAR}${ANSI_BOLD}$(if [[ $SSH_BOX ]]; then printf " from ${ANSI_YELLOW}$SSH_BOX"; fi)${ANSI_CLEAR}${ANSI_BOLD} in $ANSI_PURPLE\w${ANSI_CLEAR}${ANSI_BOLD} $(printf "\u27eb\u2500")\n$(printf "\u2514\u27eb") $(if [[ $UID -eq 0 ]]; then printf "$ANSI_RED"; printf '#'; else printf "$ANSI_GREEN"; printf '$'; fi)$ANSI_CLEAR "
          PS1="[$(if [[ $UID -eq 0 ]]; then printf "$ANSI_RED"; else printf "$ANSI_GREEN"; fi)\u$ANSI_CLEAR$ANSI_BOLD@$ANSI_BLUE\h $ANSI_PURPLE\W$ANSI_CLEAR$ANSI_BOLD] \$$ANSI_CLEAR "
      with_items:
        - /etc/skel/.bashrc
        - /root/.bashrc